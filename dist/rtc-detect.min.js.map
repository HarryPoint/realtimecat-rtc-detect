{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/RTCDetect.js","rtc-detect.min.js","src/checkDataChannel.js","src/checkDeviceSupport.js","src/checkGetUserMedia.js","src/checkRTCPeerConnection.js","src/getBrowserInfo.js","src/getOSName.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","RTCDetect","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"getBrowserInfo","getOSName","checkGetUserMedia","checkRTCPeerConnection","checkDataChannel","checkDeviceSupport","isHTTPs","location","protocol","browser","name","osName","getUserMediaSupport","RTCPeerConnectionSupport","dataChannelSupport","WebSocketSupport","WebSocket","CLOSING","screenCaputringSupport","isChrome","version","ORTCSupport","RTCIceGatherer","RTCatSupport","isFirefox","isOpera","isBaidu","./checkDataChannel","./checkDeviceSupport","./checkGetUserMedia","./checkRTCPeerConnection","./getBrowserInfo","./getOSName",2,"PeerConnectionConstructor","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","peerConnection","iceServers","url",3,"MediaDevices","hasMicrophone","hasSpeakers","hasWebcam","navigator","mediaDevices","enumerateDevices","callback","then","MediaStreamTrack","getSources","bind","results","devices","forEach","_device","device","d","kind","skip","id","deviceId","label","push",4,"webkitGetUserMedia","mozGetUserMedia","getUserMedia",5,"some","item",6,"_testExternal","reg","type","external","test","nameOffset","verOffset","ix","nAgt","appVersion","userAgent","browserName","appName","fullVersion","parseFloat","majorVersion","parseInt","indexOf","substring","lastIndexOf","toLowerCase","toUpperCase","isEdge","msSaveOrOpenBlob","msSaveBlob","isQQ","isSougou","isLiebao","match","toString","isNaN",7,"isMobile","Android","BlackBerry","iOS","Opera","Windows","any","getOsName"],"mappings":"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","file":"rtc-detect.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var getBrowserInfo = require('./getBrowserInfo');\nvar getOSName = require(\"./getOSName\");\nvar checkGetUserMedia = require(\"./checkGetUserMedia\");\nvar checkRTCPeerConnection = require(\"./checkRTCPeerConnection\");\nvar checkDataChannel = require(\"./checkDataChannel\");\nvar checkDeviceSupport = require(\"./checkDeviceSupport\");\n\nvar RTCDetect = {};\n\nvar isHTTPs = location.protocol === 'https:';\n\n// RTCDetect.browser.name || RTCDetect.browser.version || RTCDetect.browser.fullVersion\nRTCDetect.browser = getBrowserInfo();\n\n// RTCDetect.isChrome || RTCDetect.isFirefox || RTCDetect.isOpera etc\nRTCDetect.browser['is' + RTCDetect.browser.name] = true;\n\n// 获取操作系统名称\nRTCDetect.osName = getOSName();\n\n// WebRTC相关检测\n//===================================\n\n//检测是否支持getUserMedia\nRTCDetect.getUserMediaSupport = checkGetUserMedia();\n\n//检测是否支持RTCPeerConnection\nRTCDetect.RTCPeerConnectionSupport = checkRTCPeerConnection();\n\n//检测是否支持DataChannel\nRTCDetect.dataChannelSupport = checkDataChannel();\n\n//检测是否支持WebSocket\nRTCDetect.WebSocketSupport = 'WebSocket' in window && 2 === window.WebSocket.CLOSING;\n\n//检测是否支持屏幕分享功能\n//目前只有https下的35版本以上的chrome可以分享屏幕\nRTCDetect.screenCaputringSupport = false;\nif (RTCDetect.browser.isChrome && RTCDetect.browser.version >= 42) {\n    RTCDetect.screenCaputringSupport = true;\n}\nif (!isHTTPs) {\n    RTCDetect.screenCaputringSupport = false;\n}\n\n// ORTC相关\n//==================================\n//检测是否支持ORTC\nRTCDetect.ORTCSupport = typeof RTCIceGatherer !== 'undefined';\n\n//检查设备支持情况\nRTCDetect.checkDeviceSupport = checkDeviceSupport;\n\n//TODO:检测是否支持RTCat\nRTCDetect.RTCatSupport = false;\n//42版以上的chrome\nif(RTCDetect.browser.isChrome && RTCDetect.browser.version >= 42){\n    RTCDetect.RTCatSupport = true;\n}\n//38版以上的firefox\nelse if ( RTCDetect.browser.isFirefox && RTCDetect.browser.version >= 38) {\n    RTCDetect.RTCatSupport = true;\n}\n//30版以上的Opera\nelse if(RTCDetect.browser.isOpera && RTCDetect.browser.version >= 30){\n    RTCDetect.RTCatSupport = true;\n}\n//7以上的百度\nelse if(RTCDetect.browser.isBaidu && RTCDetect.browser.version >= 7){\n    RTCDetect.RTCatSupport = true;\n}\n\nmodule.exports = RTCDetect;\n\n\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.RTCDetect = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar getBrowserInfo = require('./getBrowserInfo');\nvar getOSName = require(\"./getOSName\");\nvar checkGetUserMedia = require(\"./checkGetUserMedia\");\nvar checkRTCPeerConnection = require(\"./checkRTCPeerConnection\");\nvar checkDataChannel = require(\"./checkDataChannel\");\nvar checkDeviceSupport = require(\"./checkDeviceSupport\");\n\nvar RTCDetect = {};\n\nvar isHTTPs = location.protocol === 'https:';\n\n// RTCDetect.browser.name || RTCDetect.browser.version || RTCDetect.browser.fullVersion\nRTCDetect.browser = getBrowserInfo();\n\n// RTCDetect.isChrome || RTCDetect.isFirefox || RTCDetect.isOpera etc\nRTCDetect.browser['is' + RTCDetect.browser.name] = true;\n\n// 获取操作系统名称\nRTCDetect.osName = getOSName();\n\n// WebRTC相关检测\n//===================================\n\n//检测是否支持getUserMedia\nRTCDetect.getUserMediaSupport = checkGetUserMedia();\n\n//检测是否支持RTCPeerConnection\nRTCDetect.RTCPeerConnectionSupport = checkRTCPeerConnection();\n\n//检测是否支持DataChannel\nRTCDetect.dataChannelSupport = checkDataChannel();\n\n//检测是否支持WebSocket\nRTCDetect.WebSocketSupport = 'WebSocket' in window && 2 === window.WebSocket.CLOSING;\n\n//检测是否支持屏幕分享功能\n//目前只有https下的35版本以上的chrome可以分享屏幕\nRTCDetect.screenCaputringSupport = false;\nif (RTCDetect.browser.isChrome && RTCDetect.browser.version >= 42) {\n    RTCDetect.screenCaputringSupport = true;\n}\nif (!isHTTPs) {\n    RTCDetect.screenCaputringSupport = false;\n}\n\n// ORTC相关\n//==================================\n//检测是否支持ORTC\nRTCDetect.ORTCSupport = typeof RTCIceGatherer !== 'undefined';\n\n//检查设备支持情况\nRTCDetect.checkDeviceSupport = checkDeviceSupport;\n\n//TODO:检测是否支持RTCat\nRTCDetect.RTCatSupport = false;\n//42版以上的chrome\nif(RTCDetect.browser.isChrome && RTCDetect.browser.version >= 42){\n    RTCDetect.RTCatSupport = true;\n}\n//38版以上的firefox\nelse if ( RTCDetect.browser.isFirefox && RTCDetect.browser.version >= 38) {\n    RTCDetect.RTCatSupport = true;\n}\n//30版以上的Opera\nelse if(RTCDetect.browser.isOpera && RTCDetect.browser.version >= 30){\n    RTCDetect.RTCatSupport = true;\n}\n//7以上的百度\nelse if(RTCDetect.browser.isBaidu && RTCDetect.browser.version >= 7){\n    RTCDetect.RTCatSupport = true;\n}\n\nmodule.exports = RTCDetect;\n\n\n\n},{\"./checkDataChannel\":2,\"./checkDeviceSupport\":3,\"./checkGetUserMedia\":4,\"./checkRTCPeerConnection\":5,\"./getBrowserInfo\":6,\"./getOSName\":7}],2:[function(require,module,exports){\n// 检测datahannel支持情况\n//==============================================\n\nmodule.exports = function () {\n\n    var dataChannelSupport = false;\n\n    try {\n        var PeerConnectionConstructor = window.RTCPeerConnection\n            || window.webkitRTCPeerConnection\n            || window.mozRTCPeerConnection;\n\n        if (PeerConnectionConstructor) {\n            var peerConnection = new PeerConnectionConstructor({\n                'iceServers': [{'url': 'stun:0'}]\n            });\n\n            dataChannelSupport = 'createDataChannel' in peerConnection;\n        }\n    } catch (e) {\n        dataChannelSupport = false;\n    }\n\n    return dataChannelSupport;\n};\n\n},{}],3:[function(require,module,exports){\nvar MediaDevices = [];\n\nvar hasMicrophone = false;\nvar hasSpeakers = false;\nvar hasWebcam = false;\n\nvar isHTTPs = location.protocol === 'https:';\n\nif (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    // Firefox 38+, Microsoft Edge, and Chrome 44+ seems having support of enumerateDevices\n    navigator.enumerateDevices = function (callback) {\n        navigator.mediaDevices.enumerateDevices().then(callback);\n    };\n}\n\n// http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediadevices\n// TODO: switch to enumerateDevices when landed in canary.\nmodule.exports = function (callback) {\n\n    // enumerateDevices方法shim\n    // 当MediaStreamTrack.getSources可用时,用getSources方法\n    if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {\n        navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);\n    }\n    // 当navigator.enumerateDevices方法可用时,用这个方法\n    if (!navigator.enumerateDevices && navigator.enumerateDevices) {\n        navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);\n    }\n\n    // 当浏览器不支持任何一种enumerateDevices方法时\n    if (!navigator.enumerateDevices) {\n        var results = {\n            MediaDevices: MediaDevices,\n            hasMicrophone: hasMicrophone,\n            hasSpeakers: hasSpeakers,\n            hasWebcam: hasWebcam\n        };\n        if (callback) {\n            callback(null, results)\n        }\n        return;\n    }\n\n    MediaDevices = [];\n    try {\n        navigator.enumerateDevices(function (devices) {\n            devices.forEach(function (_device) {\n                var device = {};\n                for (var d in _device) {\n                    device[d] = _device[d];\n                }\n\n                // if it is MediaStreamTrack.getSources\n                if (device.kind === 'audio') {\n                    device.kind = 'audioinput';\n                }\n\n                if (device.kind === 'video') {\n                    device.kind = 'videoinput';\n                }\n\n                var skip;\n                MediaDevices.forEach(function (d) {\n                    if (d.id === device.id && d.kind === device.kind) {\n                        skip = true;\n                    }\n                });\n\n                if (skip) {\n                    return;\n                }\n\n                if (!device.deviceId) {\n                    device.deviceId = device.id;\n                }\n\n                if (!device.id) {\n                    device.id = device.deviceId;\n                }\n\n                if (!device.label) {\n                    device.label = 'Please invoke getUserMedia once.';\n                    if (!isHTTPs) {\n                        device.label = 'HTTPs is required to get label of this ' + device.kind + ' device.';\n                    }\n                }\n\n                if (device.kind === 'audioinput') {\n                    hasMicrophone = true;\n                }\n\n                if (device.kind === 'audiooutput') {\n                    hasSpeakers = true;\n                }\n\n                if (device.kind === 'videoinput') {\n                    hasWebcam = true;\n                }\n\n                // there is no 'videoouput' in the spec.\n\n                MediaDevices.push(device);\n            });\n\n            var results = {\n                MediaDevices: MediaDevices,\n                hasMicrophone: hasMicrophone,\n                hasSpeakers: hasSpeakers,\n                hasWebcam: hasWebcam\n            };\n            \n            if (callback) {\n                callback(null, results)\n            }\n        });\n    } catch (e) {\n        //Microsoft Edge上enumerateDevices方法可能抛出错误\n        if (callback) {\n            callback(e);\n        }\n    }\n};\n\n},{}],4:[function(require,module,exports){\n//检测是否支持getUserMedia\n//==============================================\nmodule.exports = function () {\n\n    var getUserMediaSupport = false;\n\n    //Chrome与Firefox\n    if (typeof navigator.webkitGetUserMedia !== 'undefined' || typeof navigator.mozGetUserMedia !== 'undefined') {\n        getUserMediaSupport = true;\n    }\n    //Firefox已支持\n    else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        getUserMediaSupport = true;\n    }\n\n    return getUserMediaSupport;\n\n};\n\n},{}],5:[function(require,module,exports){\n//检测是否支持RTCPeerConnection\n//===================================================\nmodule.exports = function () {\n    var RTCPeerConnectionSupport = false;\n    RTCPeerConnectionSupport = ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection'].some(function (item) {\n        return (item in window);\n    });\n    return RTCPeerConnectionSupport;\n};\n\n},{}],6:[function(require,module,exports){\n// 获取浏览器信息 UA sniffing\n//==============================================\n\nmodule.exports = function () {\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var browserName = navigator.appName;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n\n    // In Opera 15+, the true version is after \"OPR/\"\n    if ((verOffset=nAgt.indexOf(\"OPR/\"))!=-1) {\n        browserName = \"Opera\";\n        fullVersion = nAgt.substring(verOffset+4);\n    }\n    // In older Opera, the true version is after \"Opera\" or after \"Version\"\n    else if ((verOffset = nAgt.indexOf('Opera')) !== -1) {\n        browserName = 'Opera';\n        fullVersion = nAgt.substring(verOffset + 6);\n\n        if ((verOffset = nAgt.indexOf('Version')) !== -1) {\n            fullVersion = nAgt.substring(verOffset + 8);\n        }\n    }\n    // In MSIE, the true version is after 'MSIE' in userAgent\n    else if ((verOffset = nAgt.indexOf('MSIE')) !== -1) {\n        browserName = 'IE';\n        fullVersion = nAgt.substring(verOffset + 5);\n    }\n    // In Chrome, the true version is after 'Chrome'\n    else if ((verOffset = nAgt.indexOf('Chrome')) !== -1) {\n        browserName = 'Chrome';\n        fullVersion = nAgt.substring(verOffset + 7);\n    }\n    // In Safari, the true version is after 'Safari' or after 'Version'\n    else if ((verOffset = nAgt.indexOf('Safari')) !== -1) {\n        browserName = 'Safari';\n        fullVersion = nAgt.substring(verOffset + 7);\n\n        if ((verOffset = nAgt.indexOf('Version')) !== -1) {\n            fullVersion = nAgt.substring(verOffset + 8);\n        }\n    }\n    // In Firefox, the true version is after 'Firefox'\n    else if ((verOffset = nAgt.indexOf('Firefox')) !== -1) {\n        browserName = 'Firefox';\n        fullVersion = nAgt.substring(verOffset + 8);\n    }\n    // In most other browsers, 'name/version' is at the end of userAgent\n    else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\n        browserName = nAgt.substring(nameOffset, verOffset);\n        fullVersion = nAgt.substring(verOffset + 1);\n\n        if (browserName.toLowerCase() === browserName.toUpperCase()) {\n            browserName = navigator.appName;\n        }\n    }\n\n    // MS Edge\n    var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);\n    // 国产浏览器\n    var isQQ = /QQBrowser/.test(navigator.userAgent);\n    var isSougou = /MetaSr/.test(navigator.userAgent);\n    var isBaidu = /BIDUBrowser/.test(navigator.userAgent);\n    var isLiebao = _testExternal(/^liebao/i, 0);\n    // TODO:360浏览器\n    var isEE360 = false;\n    var isSE360 = false;\n\n    function _testExternal(reg, type) {\n        var external = window.external || {};\n        for (var i in external) {\n            if (reg.test(type ? external[i] : i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    if (isEdge) {\n        browserName = 'Edge';\n        // fullVersion = navigator.userAgent.split('Edge/')[1];\n        fullVersion = parseInt(navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)[2], 10).toString();\n    }\n\n    if(isQQ){\n        browserName = 'QQ';\n        fullVersion = parseInt(navigator.userAgent.match(/QQBrowser\\/(\\d+).(\\d+)/)[2], 10).toString();\n    }\n\n    if(isSougou){\n        browserName = 'Sougou';\n        fullVersion = parseInt(navigator.userAgent.match(/MetaSr (\\d+).(\\d+)/)[2], 10).toString();\n    }\n\n    if(isBaidu){\n        browserName = 'Baidu';\n        fullVersion = parseInt(navigator.userAgent.match(/BIDUBrowser\\/(\\d+).(\\d+)/)[1], 10).toString();\n    }\n\n    if(isLiebao){\n        browserName = 'Liebao';\n        fullVersion = \"\";\n    }\n\n    // trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    majorVersion = parseInt('' + fullVersion, 10);\n\n    if (isNaN(majorVersion)) {\n        fullVersion = '' + parseFloat(navigator.appVersion);\n        majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    return {\n        fullVersion: fullVersion,\n        version: majorVersion,\n        name: browserName\n    };\n};\n\n},{}],7:[function(require,module,exports){\n// Get OS Name UA sniffing\n//====================================================================\nmodule.exports = function () {\n    var osName = 'Unknown OS';\n\n    var isMobile = {\n        Android: function () {\n            return navigator.userAgent.match(/Android/i);\n        },\n        BlackBerry: function () {\n            return navigator.userAgent.match(/BlackBerry/i);\n        },\n        iOS: function () {\n            return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n        },\n        Opera: function () {\n            return navigator.userAgent.match(/Opera Mini/i);\n        },\n        Windows: function () {\n            return navigator.userAgent.match(/IEMobile/i);\n        },\n        any: function () {\n            return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n        },\n        getOsName: function () {\n            var osName = 'Unknown OS';\n            if (isMobile.Android()) {\n                osName = 'Android';\n            }\n\n            if (isMobile.BlackBerry()) {\n                osName = 'BlackBerry';\n            }\n\n            if (isMobile.iOS()) {\n                osName = 'iOS';\n            }\n\n            if (isMobile.Opera()) {\n                osName = 'Opera Mini';\n            }\n\n            if (isMobile.Windows()) {\n                osName = 'Windows';\n            }\n\n            return osName;\n        }\n    };\n\n    if (isMobile.any()) {\n        osName = isMobile.getOsName();\n    } else {\n        if (navigator.appVersion.indexOf('Win') !== -1) {\n            osName = 'Windows';\n        }\n\n        if (navigator.appVersion.indexOf('Mac') !== -1) {\n            osName = 'OSX';\n        }\n\n        if (navigator.appVersion.indexOf('X11') !== -1) {\n            osName = 'UNIX';\n        }\n\n        if (navigator.appVersion.indexOf('Linux') !== -1) {\n            osName = 'Linux';\n        }\n    }\n\n    return osName;\n}\n},{}]},{},[1])(1)\n});\n\n","// 检测datahannel支持情况\n//==============================================\n\nmodule.exports = function () {\n\n    var dataChannelSupport = false;\n\n    try {\n        var PeerConnectionConstructor = window.RTCPeerConnection\n            || window.webkitRTCPeerConnection\n            || window.mozRTCPeerConnection;\n\n        if (PeerConnectionConstructor) {\n            var peerConnection = new PeerConnectionConstructor({\n                'iceServers': [{'url': 'stun:0'}]\n            });\n\n            dataChannelSupport = 'createDataChannel' in peerConnection;\n        }\n    } catch (e) {\n        dataChannelSupport = false;\n    }\n\n    return dataChannelSupport;\n};\n","var MediaDevices = [];\n\nvar hasMicrophone = false;\nvar hasSpeakers = false;\nvar hasWebcam = false;\n\nvar isHTTPs = location.protocol === 'https:';\n\nif (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    // Firefox 38+, Microsoft Edge, and Chrome 44+ seems having support of enumerateDevices\n    navigator.enumerateDevices = function (callback) {\n        navigator.mediaDevices.enumerateDevices().then(callback);\n    };\n}\n\n// http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediadevices\n// TODO: switch to enumerateDevices when landed in canary.\nmodule.exports = function (callback) {\n\n    // enumerateDevices方法shim\n    // 当MediaStreamTrack.getSources可用时,用getSources方法\n    if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {\n        navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);\n    }\n    // 当navigator.enumerateDevices方法可用时,用这个方法\n    if (!navigator.enumerateDevices && navigator.enumerateDevices) {\n        navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);\n    }\n\n    // 当浏览器不支持任何一种enumerateDevices方法时\n    if (!navigator.enumerateDevices) {\n        var results = {\n            MediaDevices: MediaDevices,\n            hasMicrophone: hasMicrophone,\n            hasSpeakers: hasSpeakers,\n            hasWebcam: hasWebcam\n        };\n        if (callback) {\n            callback(null, results)\n        }\n        return;\n    }\n\n    MediaDevices = [];\n    try {\n        navigator.enumerateDevices(function (devices) {\n            devices.forEach(function (_device) {\n                var device = {};\n                for (var d in _device) {\n                    device[d] = _device[d];\n                }\n\n                // if it is MediaStreamTrack.getSources\n                if (device.kind === 'audio') {\n                    device.kind = 'audioinput';\n                }\n\n                if (device.kind === 'video') {\n                    device.kind = 'videoinput';\n                }\n\n                var skip;\n                MediaDevices.forEach(function (d) {\n                    if (d.id === device.id && d.kind === device.kind) {\n                        skip = true;\n                    }\n                });\n\n                if (skip) {\n                    return;\n                }\n\n                if (!device.deviceId) {\n                    device.deviceId = device.id;\n                }\n\n                if (!device.id) {\n                    device.id = device.deviceId;\n                }\n\n                if (!device.label) {\n                    device.label = 'Please invoke getUserMedia once.';\n                    if (!isHTTPs) {\n                        device.label = 'HTTPs is required to get label of this ' + device.kind + ' device.';\n                    }\n                }\n\n                if (device.kind === 'audioinput') {\n                    hasMicrophone = true;\n                }\n\n                if (device.kind === 'audiooutput') {\n                    hasSpeakers = true;\n                }\n\n                if (device.kind === 'videoinput') {\n                    hasWebcam = true;\n                }\n\n                // there is no 'videoouput' in the spec.\n\n                MediaDevices.push(device);\n            });\n\n            var results = {\n                MediaDevices: MediaDevices,\n                hasMicrophone: hasMicrophone,\n                hasSpeakers: hasSpeakers,\n                hasWebcam: hasWebcam\n            };\n            \n            if (callback) {\n                callback(null, results)\n            }\n        });\n    } catch (e) {\n        //Microsoft Edge上enumerateDevices方法可能抛出错误\n        if (callback) {\n            callback(e);\n        }\n    }\n};\n","//检测是否支持getUserMedia\n//==============================================\nmodule.exports = function () {\n\n    var getUserMediaSupport = false;\n\n    //Chrome与Firefox\n    if (typeof navigator.webkitGetUserMedia !== 'undefined' || typeof navigator.mozGetUserMedia !== 'undefined') {\n        getUserMediaSupport = true;\n    }\n    //Firefox已支持\n    else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        getUserMediaSupport = true;\n    }\n\n    return getUserMediaSupport;\n\n};\n","//检测是否支持RTCPeerConnection\n//===================================================\nmodule.exports = function () {\n    var RTCPeerConnectionSupport = false;\n    RTCPeerConnectionSupport = ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection'].some(function (item) {\n        return (item in window);\n    });\n    return RTCPeerConnectionSupport;\n};\n","// 获取浏览器信息 UA sniffing\n//==============================================\n\nmodule.exports = function () {\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var browserName = navigator.appName;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n\n    // In Opera 15+, the true version is after \"OPR/\"\n    if ((verOffset=nAgt.indexOf(\"OPR/\"))!=-1) {\n        browserName = \"Opera\";\n        fullVersion = nAgt.substring(verOffset+4);\n    }\n    // In older Opera, the true version is after \"Opera\" or after \"Version\"\n    else if ((verOffset = nAgt.indexOf('Opera')) !== -1) {\n        browserName = 'Opera';\n        fullVersion = nAgt.substring(verOffset + 6);\n\n        if ((verOffset = nAgt.indexOf('Version')) !== -1) {\n            fullVersion = nAgt.substring(verOffset + 8);\n        }\n    }\n    // In MSIE, the true version is after 'MSIE' in userAgent\n    else if ((verOffset = nAgt.indexOf('MSIE')) !== -1) {\n        browserName = 'IE';\n        fullVersion = nAgt.substring(verOffset + 5);\n    }\n    // In Chrome, the true version is after 'Chrome'\n    else if ((verOffset = nAgt.indexOf('Chrome')) !== -1) {\n        browserName = 'Chrome';\n        fullVersion = nAgt.substring(verOffset + 7);\n    }\n    // In Safari, the true version is after 'Safari' or after 'Version'\n    else if ((verOffset = nAgt.indexOf('Safari')) !== -1) {\n        browserName = 'Safari';\n        fullVersion = nAgt.substring(verOffset + 7);\n\n        if ((verOffset = nAgt.indexOf('Version')) !== -1) {\n            fullVersion = nAgt.substring(verOffset + 8);\n        }\n    }\n    // In Firefox, the true version is after 'Firefox'\n    else if ((verOffset = nAgt.indexOf('Firefox')) !== -1) {\n        browserName = 'Firefox';\n        fullVersion = nAgt.substring(verOffset + 8);\n    }\n    // In most other browsers, 'name/version' is at the end of userAgent\n    else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\n        browserName = nAgt.substring(nameOffset, verOffset);\n        fullVersion = nAgt.substring(verOffset + 1);\n\n        if (browserName.toLowerCase() === browserName.toUpperCase()) {\n            browserName = navigator.appName;\n        }\n    }\n\n    // MS Edge\n    var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);\n    // 国产浏览器\n    var isQQ = /QQBrowser/.test(navigator.userAgent);\n    var isSougou = /MetaSr/.test(navigator.userAgent);\n    var isBaidu = /BIDUBrowser/.test(navigator.userAgent);\n    var isLiebao = _testExternal(/^liebao/i, 0);\n    // TODO:360浏览器\n    var isEE360 = false;\n    var isSE360 = false;\n\n    function _testExternal(reg, type) {\n        var external = window.external || {};\n        for (var i in external) {\n            if (reg.test(type ? external[i] : i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    if (isEdge) {\n        browserName = 'Edge';\n        // fullVersion = navigator.userAgent.split('Edge/')[1];\n        fullVersion = parseInt(navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)[2], 10).toString();\n    }\n\n    if(isQQ){\n        browserName = 'QQ';\n        fullVersion = parseInt(navigator.userAgent.match(/QQBrowser\\/(\\d+).(\\d+)/)[2], 10).toString();\n    }\n\n    if(isSougou){\n        browserName = 'Sougou';\n        fullVersion = parseInt(navigator.userAgent.match(/MetaSr (\\d+).(\\d+)/)[2], 10).toString();\n    }\n\n    if(isBaidu){\n        browserName = 'Baidu';\n        fullVersion = parseInt(navigator.userAgent.match(/BIDUBrowser\\/(\\d+).(\\d+)/)[1], 10).toString();\n    }\n\n    if(isLiebao){\n        browserName = 'Liebao';\n        fullVersion = \"\";\n    }\n\n    // trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    majorVersion = parseInt('' + fullVersion, 10);\n\n    if (isNaN(majorVersion)) {\n        fullVersion = '' + parseFloat(navigator.appVersion);\n        majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    return {\n        fullVersion: fullVersion,\n        version: majorVersion,\n        name: browserName\n    };\n};\n","// Get OS Name UA sniffing\n//====================================================================\nmodule.exports = function () {\n    var osName = 'Unknown OS';\n\n    var isMobile = {\n        Android: function () {\n            return navigator.userAgent.match(/Android/i);\n        },\n        BlackBerry: function () {\n            return navigator.userAgent.match(/BlackBerry/i);\n        },\n        iOS: function () {\n            return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n        },\n        Opera: function () {\n            return navigator.userAgent.match(/Opera Mini/i);\n        },\n        Windows: function () {\n            return navigator.userAgent.match(/IEMobile/i);\n        },\n        any: function () {\n            return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n        },\n        getOsName: function () {\n            var osName = 'Unknown OS';\n            if (isMobile.Android()) {\n                osName = 'Android';\n            }\n\n            if (isMobile.BlackBerry()) {\n                osName = 'BlackBerry';\n            }\n\n            if (isMobile.iOS()) {\n                osName = 'iOS';\n            }\n\n            if (isMobile.Opera()) {\n                osName = 'Opera Mini';\n            }\n\n            if (isMobile.Windows()) {\n                osName = 'Windows';\n            }\n\n            return osName;\n        }\n    };\n\n    if (isMobile.any()) {\n        osName = isMobile.getOsName();\n    } else {\n        if (navigator.appVersion.indexOf('Win') !== -1) {\n            osName = 'Windows';\n        }\n\n        if (navigator.appVersion.indexOf('Mac') !== -1) {\n            osName = 'OSX';\n        }\n\n        if (navigator.appVersion.indexOf('X11') !== -1) {\n            osName = 'UNIX';\n        }\n\n        if (navigator.appVersion.indexOf('Linux') !== -1) {\n            osName = 'Linux';\n        }\n    }\n\n    return osName;\n}"],"sourceRoot":"/source/"}